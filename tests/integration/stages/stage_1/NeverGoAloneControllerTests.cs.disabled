using Godot;
using static GdUnit4.Assertions;
using GdUnit4;
using OmegaSpiral.Source.Narrative;
using OmegaSpiral.Source.Scripts.Common;

namespace OmegaSpiral.Tests.Narrative
{
    /// <summary>
    /// GDUnit4 unit tests for NeverGoAloneController JSON parsing and stage logic.
    /// </summary>
    [TestSuite]
    [RequireGodotRuntime]
    public class NeverGoAloneControllerTests : IDisposable
    {
        private const string TestJsonPath = "res://source/Data/stages/act3/never_go_alone.json";

        /// <inheritdoc/>
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        private NeverGoAloneController? controller;

        [Before]
        public void Setup()
        {
            this.controller = new NeverGoAloneController();
        }

        [TestCase]
        [RequireGodotRuntime]
        public void LoadstagedataValidjsonLoadscorrectly()
        {
            // Act
            this.controller!.LoadStageData();

            // Assert
            var stageData = this.controller.GetStageData();
            AssertThat(stageData).IsNotNull();
            AssertThat(stageData["stage_id"].AsString()).IsEqual("stage3_never_go_alone");
            AssertThat(stageData["stage_name"].AsString()).IsEqual("Never Go Alone");
            AssertThat(stageData["stage_beats"].AsGodotArray()).IsNotNull();
            AssertThat(stageData["stage_beats"].AsGodotArray().Count).IsEqual(6);
        }

        [TestCase]
        [RequireGodotRuntime]
        public void LoadstagedataMissingfileHandlesgracefully()
        {
            // Arrange
            // Cannot modify const field - skipping this test case

            // Act & Assert
            AssertThat(() => this.controller!.LoadStageData()).DoesNotThrow();
            var stageData = this.controller?.GetStageData();
            AssertThat(stageData).IsNotNull();
            AssertThat(stageData).IsEmpty();

            // Restore
            // Cannot modify const field - skipping this test case
        }

        [TestCase]
        [RequireGodotRuntime]
        public void LoadstagedataInvalidjsonHandlesgracefully()
        {
            // Arrange
            var tempPath = "user://test_invalid.json";
            var file = Godot.FileAccess.Open(tempPath, Godot.FileAccess.ModeFlags.Write);
            file.StoreString("invalid json");
            file.Close();

            // var originalPath = NeverGoAloneController.StageConfigPath;
            // Cannot modify const field - skipping this test case

            // Act & Assert
            AssertThat(() => this.controller!.LoadStageData()).DoesNotThrow();
            var stageData = this.controller?.GetStageData();
            AssertThat(stageData).IsNotNull();
            AssertThat(stageData).IsEmpty();

            // Cleanup
            DirAccess.RemoveAbsolute(tempPath);
            // Cannot modify const field - skipping this test case
        }

        [TestCase]
        [RequireGodotRuntime]
        public void GetstagebeatsReturnscorrectnumber()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();

            // Act
            var beatsVar = stageData["stage_beats"];
            var beats = beatsVar.AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();

            // Assert
            AssertThat(beats).IsNotNull();
            AssertThat(beats.Count).IsEqual(6);
        }

        [TestCase]
        [RequireGodotRuntime]
        public void GetstagebeatsMirrorbeatHascorrectstructure()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();
            var beats = stageData["stage_beats"].AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();
            var firstBeat = beats[0];

            // Assert
            AssertThat(firstBeat["id"].AsString()).IsEqual("beat_1");
            AssertThat(firstBeat["type"].AsString()).IsEqual("mirror");
            AssertThat(firstBeat["mirror_data"]).IsNotNull();
            var mirrorData = firstBeat["mirror_data"].AsGodotDictionary<string, Variant>();
            var availableChars = mirrorData["available_characters"].AsGodotArray();
            AssertThat(availableChars.Count).IsEqual(4);
        }

        [TestCase]
        [RequireGodotRuntime]
        public void GetstagebeatsCombatbeatHascorrectstructure()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();
            var beats = stageData["stage_beats"].AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();
            var secondBeat = beats[1];

            // Assert
            AssertThat(secondBeat["id"].AsString()).IsEqual("beat_2");
            AssertThat(secondBeat["type"].AsString()).IsEqual("combat");
            AssertThat(secondBeat["combat_data"]).IsNotNull();
            var combatData = secondBeat["combat_data"].AsGodotDictionary<string, Variant>();
            AssertThat(combatData["initial_party_size"].AsInt32()).IsEqual(1);
            AssertThat(combatData["required_party_size"].AsInt32()).IsEqual(2);
        }

        [TestCase]
        [RequireGodotRuntime]
        public void ParsemirrordataValiddataReturnscorrectcharacters()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();
            var beats = stageData["stage_beats"].AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();
            var firstBeat = beats[0];
            var mirrorData = firstBeat["mirror_data"].AsGodotDictionary<string, Variant>();
            var charsVar = mirrorData["available_characters"];
            var chars = charsVar.AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();

            // Act
            var firstChar = chars[0];
            var characterData = CharacterData.FromDictionary(firstChar);

            // Assert
            AssertThat(characterData.Id).IsEqual("fighter");
            AssertThat(characterData.Name).IsEqual("Fighter");
            AssertThat(characterData.DreamweaverReflection).IsEqual("light");
        }

        [TestCase]
        [RequireGodotRuntime]
        public void ParsecombatdataValiddataReturnscorrectencounter()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();
            var beats = stageData["stage_beats"].AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();
            var secondBeat = beats[1];
            var combatData = secondBeat["combat_data"].AsGodotDictionary<string, Variant>();

            // Assert
            AssertThat(combatData["encounter"].AsString()).IsEqual("A single, powerful 'Wolf-Claw Hybrid' blocks the path.");
            AssertThat(combatData["initial_party_size"].AsInt32()).IsEqual(1);
            AssertThat(combatData["required_party_size"].AsInt32()).IsEqual(2);
            AssertThat(combatData["outcome"].AsString()).IsEqual("automatic_return_to_mirror");
        }

        [TestCase]
        [RequireGodotRuntime]
        public void Stage2influenceModifiersexist()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();

            // Assert
            AssertThat(stageData["stage2_influence"]).IsNotNull();
            var influence = stageData["stage2_influence"].AsGodotDictionary<string, Variant>();
            var modifiers = influence["modifiers"].AsGodotArray<Godot.Collections.Dictionary<string, Variant>>();
            AssertThat(modifiers.Count).IsEqual(3);
        }

        [TestCase]
        [RequireGodotRuntime]
        public void PartypersistenceTriggerafterbeat5()
        {
            // Arrange
            this.controller!.LoadStageData();
            var stageData = this.controller.GetStageData();

            // Assert
            AssertThat(stageData["party_persistence"]).IsNotNull();
            var persistence = stageData["party_persistence"].AsGodotDictionary<string, Variant>();
            AssertThat(persistence["trigger"].AsString()).IsEqual("after_beat_5");
            AssertThat(persistence["method"].AsString()).IsEqual("GameState.PlayerParty.AddMember()");
        }

        [TestCase]
        [RequireGodotRuntime]
        public static void CharactertocharactermappingFighterMapscorrectly()
        {
            // Arrange
            var charData = new CharacterData("fighter", "Fighter", "Test description", "light");

            // Act
            var character = charData.ToCharacter();

            // Assert
            AssertThat(character.Name).IsEqual("Fighter");
            AssertThat(character.Class).IsEqual(CharacterClass.Fighter);
            AssertThat(character.Race).IsEqual(CharacterRace.Human);
        }

        [TestCase]
        [RequireGodotRuntime]
        public static void CharactertocharactermappingWizardMapscorrectly()
        {
            // Arrange
            var charData = new CharacterData("wizard", "Wizard", "Test description", "mischief");

            // Act
            var character = charData.ToCharacter();

            // Assert
            AssertThat(character.Name).IsEqual("Wizard");
            AssertThat(character.Class).IsEqual(CharacterClass.Mage);
            AssertThat(character.Race).IsEqual(CharacterRace.Human);
        }

        [TestCase]
        [RequireGodotRuntime]
        public static void CharactertocharactermappingUnknownDefaultstofighter()
        {
            // Arrange
            var charData = new CharacterData("unknown", "Unknown", "Test description", "light");

            // Act
            var character = charData.ToCharacter();

            // Assert
            AssertThat(character.Name).IsEqual("Unknown");
            AssertThat(character.Class).IsEqual(CharacterClass.Fighter);
            AssertThat(character.Race).IsEqual(CharacterRace.Human);
        }
    }
}
