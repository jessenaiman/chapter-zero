# .editorconfig for strict C# code style and Roslynator-only analyzer rules
root = true

# Remove all StyleCop and ruleset settings, enforce only Roslynator
[*.cs]
indent_style = space
indent_size = 4
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true

# Only Roslynator and C# code style rules below

# Disable StyleCop for all files (project-wide)
dotnet_analyzer_diagnostic.category-StyleCop.severity = none

# C# specific rules
csharp_new_line_before_open_brace = all
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_space_after_cast = true
csharp_space_around_binary_operators = true
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true
csharp_style_expression_bodied_methods = true
csharp_style_expression_bodied_properties = true
csharp_style_expression_bodied_indexers = true
csharp_style_expression_bodied_accessors = true
csharp_style_inlined_variable_declaration = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_switch_expression = false
csharp_style_prefer_tuple_swap = false
csharp_style_prefer_auto_properties = true
csharp_style_prefer_simple_using_statement = true
csharp_style_prefer_local_over_anonymous_function = true
csharp_style_prefer_conditional_expression_over_assignment = true
csharp_style_prefer_conditional_expression_over_return = true
dotnet_naming_style.private_prefix_style.required_prefix = _

# Microsoft CodeAnalysis (CA) and Roslynator Analyzers Configuration

# Security Rules (Critical for game security)
dotnet_diagnostic.CA3001.severity = error    # Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3002.severity = error    # Review code for XSS vulnerabilities
dotnet_diagnostic.CA3075.severity = error    # Insecure XML processing
dotnet_diagnostic.CA5350.severity = error    # Do not use weak cryptographic algorithms

# Performance Rules (Critical for game performance)
dotnet_diagnostic.CA1802.severity = warning  # Use literals where appropriate
dotnet_diagnostic.CA1805.severity = error    # Do not initialize unnecessarily
dotnet_diagnostic.CA1810.severity = error    # Initialize reference type static fields inline
dotnet_diagnostic.CA1825.severity = error    # Avoid unnecessary array allocations
dotnet_diagnostic.CA1844.severity = warning  # Provide memory-efficient alternatives

# Reliability Rules (Critical for game stability)
dotnet_diagnostic.CA2007.severity = warning  # Consider calling ConfigureAwait on awaited task
dotnet_diagnostic.CA2009.severity = error    # Do not call ToImmutable on Immutable collection
dotnet_diagnostic.CA2213.severity = error    # Disposable fields should be disposed

# Maintainability Rules (Critical for code quality)
dotnet_diagnostic.CA1501.severity = warning  # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity = error    # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity = error    # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity = error    # Avoid excessive class coupling

# Design Rules (Critical for API design)
dotnet_diagnostic.CA1002.severity = error    # Do not expose generic lists
dotnet_diagnostic.CA1014.severity = error    # Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1030.severity = error    # Use events where appropriate
dotnet_diagnostic.CA1052.severity = error    # Static holder types should be sealed
dotnet_diagnostic.CA1812.severity = error    # Avoid uninstantiated internal classes

# Roslynator Analyzers Configuration
# Documentation Rules (align with mandatory XML docs requirement)
dotnet_diagnostic.RCS1138.severity = error    # Add summary to documentation comment
dotnet_diagnostic.RCS1139.severity = error    # Add summary element to documentation comment
dotnet_diagnostic.RCS1140.severity = error    # Add exception documentation to method
dotnet_diagnostic.RCS1154.severity = error    # Sort modifiers
dotnet_diagnostic.RCS1155.severity = error    # Use StringComparison when comparing strings

# Code Quality Rules (align with DDD/SOLID principles)
dotnet_diagnostic.RCS1001.severity = error    # Add braces (when statement spans over multiple lines)
dotnet_diagnostic.RCS1003.severity = error    # Add braces to if-else
dotnet_diagnostic.RCS1018.severity = error    # Add accessibility modifiers
dotnet_diagnostic.RCS1021.severity = error    # Simplify lazy initialization
dotnet_diagnostic.RCS1036.severity = error    # Remove redundant empty line
dotnet_diagnostic.RCS1046.severity = error  # Method name should not match parameter name (disable for flexibility)
dotnet_diagnostic.RCS1051.severity = error    # Parentheses should not be used
dotnet_diagnostic.RCS1073.severity = error    # Convert if to return statement
dotnet_diagnostic.RCS1085.severity = error    # Use auto-implemented property
dotnet_diagnostic.RCS1090.severity = error    # Call 'ConfigureAwait(false)'
dotnet_diagnostic.RCS1102.severity = warning   # Single class per file
dotnet_diagnostic.RCS1103.severity = warning   # File name should match class name
dotnet_diagnostic.RCS1110.severity = error    # Declare type inside namespace
dotnet_diagnostic.RCS1123.severity = error    # Add parentheses when necessary
dotnet_diagnostic.RCS1128.severity = error    # Use coalesce expression
dotnet_diagnostic.RCS1132.severity = error    # Remove redundant overriding member
dotnet_diagnostic.RCS1141.severity = error    # Add parameter name to parameter
dotnet_diagnostic.RCS1158.severity = error    # Static member should not use generic type parameter
dotnet_diagnostic.RCS1163.severity = error    # Unused parameter
dotnet_diagnostic.RCS1164.severity = error    # Unused type parameter
dotnet_diagnostic.RCS1170.severity = error    # Use read-only auto-implemented property
dotnet_diagnostic.RCS1175.severity = error    # Unused 'this' parameter
dotnet_diagnostic.RCS1181.severity = error    # Convert comment to documentation comment
dotnet_diagnostic.RCS1187.severity = error    # Use constant instead of field
dotnet_diagnostic.RCS1192.severity = error    # Unnecessary usage of verbatim string literal
dotnet_diagnostic.RCS1194.severity = error    # Implement exception constructors
dotnet_diagnostic.RCS1202.severity = error    # Avoid NullReferenceException
dotnet_diagnostic.RCS1207.severity = error    # Use method chaining
dotnet_diagnostic.RCS1210.severity = error    # Return completed task instead of null
dotnet_diagnostic.RCS1212.severity = error    # Remove redundant assignment
dotnet_diagnostic.RCS1214.severity = error    # Unnecessary interpolated string
dotnet_diagnostic.RCS1215.severity = error    # Expression is always equal to true/false
dotnet_diagnostic.RCS1221.severity = error    # Use pattern matching instead of 'is' and cast
dotnet_diagnostic.RCS1225.severity = error    # Make class sealed
dotnet_diagnostic.RCS1229.severity = error    # Use async/await when necessary
dotnet_diagnostic.RCS1233.severity = error    # Use short-circuiting operator
dotnet_diagnostic.RCS1242.severity = error    # Do not pass non-read-only struct by read-only reference
dotnet_diagnostic.RCS1246.severity = error    # Use element access

# Disable overly strict or conflicting rules
dotnet_diagnostic.RCS1037.severity = none     # Remove trailing white-space (handled by editorconfig)
dotnet_diagnostic.RCS1050.severity = none     # Add empty line after embedded statement (conflicts with style)
dotnet_diagnostic.RCS1118.severity = none     # Mark local variable as const (too restrictive)
dotnet_diagnostic.RCS1169.severity = none     # Make field read-only (may conflict with patterns)
dotnet_diagnostic.RCS1174.severity = none     # Remove redundant async/await (may be needed for patterns)
dotnet_diagnostic.RCS1197.severity = none     # Optimize StringBuilder usage (performance micro-optimization)
dotnet_diagnostic.RCS1201.severity = none     # Use pattern matching (already enabled via csharp_style)
dotnet_diagnostic.RCS1217.severity = none     # Convert interpolated string to concatenation (style preference)
dotnet_diagnostic.RCS1220.severity = none     # Use pattern matching to check for null (style preference)
dotnet_diagnostic.RCS1239.severity = none     # Use 'for' statement instead of 'foreach' (performance vs readability)
dotnet_diagnostic.RCS1243.severity = none     # Duplicate word in comment (may be intentional)

# Async and Performance Rules (align with .NET guidelines)
dotnet_diagnostic.RCS1090.severity = error  # Call 'ConfigureAwait(false)' - warning to allow flexibility
dotnet_diagnostic.RCS1229.severity = error  # Use async/await when necessary - warning for review

# Naming Rules (disable to allow flexibility, enforce via code reviews)
dotnet_diagnostic.RCS1046.severity = none     # Method name should not match parameter name
dotnet_diagnostic.RCS1047.severity = none     # Non-asynchronous method name should not end with 'Async'
dotnet_diagnostic.RCS1048.severity = none     # Asynchronous method name should end with 'Async'
dotnet_diagnostic.RCS1049.severity = none     # Asynchronous method name with suffix 'Async'

# Test-specific naming rules (allow underscores in test method names)
[Tests/**/*.cs]
dotnet_diagnostic.CA1707.severity = none
dotnet_diagnostic.CA1822.severity = none
dotnet_naming_rule.test_methods_should_use_pascal_case.severity = error
dotnet_naming_rule.test_methods_should_use_pascal_case.symbols = test_methods
dotnet_naming_rule.test_methods_should_use_pascal_case.style = test_method_style

dotnet_naming_symbols.test_methods.applicable_kinds = method
dotnet_naming_symbols.test_methods.applicable_accessibilities = public,protected,private,internal
dotnet_naming_symbols.test_methods.name_match = ^[A-Z][a-zA-Z0-9]*(_[A-Z][a-zA-Z0-9]*)*$

dotnet_naming_style.test_method_style.capitalization = pascal_case
dotnet_naming_style.test_method_style.word_separator = _

# Godot Shader Files (.gdshader)
# GLSL shaders use snake_case as per GPU programming standards
[**/*.gdshader]
indent_style = space
indent_size = 4
charset = utf-8
end_of_line = lf
insert_final_newline = true
trim_trailing_whitespace = true
# Shader naming: lowercase_with_underscores (GLSL convention)
# Examples: crt_phosphor.gdshader, crt_scanlines.gdshader, post_process_bloom.gdshader
[**/*.{cs,csx}]
dotnet_naming_rule.methods_should_use_pascal_case.severity = error
dotnet_naming_rule.methods_should_use_pascal_case.symbols = methods
dotnet_naming_rule.methods_should_use_pascal_case.style = method_style

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public,protected,private,internal
dotnet_naming_symbols.methods.name_match = ^[A-Z][a-zA-Z0-9]*$

dotnet_naming_style.method_style.capitalization = pascal_case

[.godot/**/*.cs]
dotnet_diagnostic.CS1591.severity = none

# Suppress SA1636 copyright header warnings
dotnet_diagnostic.SA1636.severity = none

# Unhandled Exception Handling
# Allow async method exceptions (CS1998) and unused variables (CS0168) as warnings for debugging
dotnet_diagnostic.CS1998.severity = warning # This async method lacks 'await' operators and will run synchronously
dotnet_diagnostic.CS0168.severity = warning # Variable is declared but never used (may be needed for debugging)

# GdUnit4 Analyzer Configuration
# Enforce correct usage of GdUnit4 test attributes per documentation
dotnet_diagnostic.GdUnit0201.severity = error # Multiple TestCase with DataPoint not allowed
dotnet_diagnostic.GdUnit0202.severity = error # Invalid test attribute combination
dotnet_diagnostic.GdUnit0203.severity = error # Invalid DataPoint attribute usage

# Godot-specific suppressions (ONLY for .godot generated code, NOT project code)
[.godot/**/*.cs]
dotnet_diagnostic.CS0246.severity = none      # Type or namespace not found (Godot generated only)
dotnet_diagnostic.CS0103.severity = none      # Name does not exist (Godot generated only)
dotnet_diagnostic.CS0117.severity = none      # Does not contain a definition (Godot generated only)
dotnet_diagnostic.CS1061.severity = none      # No accessible extension method (Godot generated only)

# Markdown linting suppressions (suppress markdown warnings as requested)
[*.md]
# Disable all markdownlint rules to suppress warnings
dotnet_diagnostic.MD001 = none
dotnet_diagnostic.MD002 = none
dotnet_diagnostic.MD003 = none
dotnet_diagnostic.MD004 = none
dotnet_diagnostic.MD005 = none
dotnet_diagnostic.MD006 = none
dotnet_diagnostic.MD007 = none
dotnet_diagnostic.MD009 = none
dotnet_diagnostic.MD010 = none
dotnet_diagnostic.MD011 = none
dotnet_diagnostic.MD012 = none
dotnet_diagnostic.MD013 = none
dotnet_diagnostic.MD014 = none
dotnet_diagnostic.MD019 = none
dotnet_diagnostic.MD02 = none
dotnet_diagnostic.MD023 = none
dotnet_diagnostic.MD024 = none
dotnet_diagnostic.MD025 = none
dotnet_diagnostic.MD026 = none
dotnet_diagnostic.MD027 = none
dotnet_diagnostic.MD028 = none
dotnet_diagnostic.MD029 = none
dotnet_diagnostic.MD030 = none
dotnet_diagnostic.MD031 = none
dotnet_diagnostic.MD032 = none
dotnet_diagnostic.MD033 = none
dotnet_diagnostic.MD034 = none
dotnet_diagnostic.MD035 = none
dotnet_diagnostic.MD036 = none
dotnet_diagnostic.MD037 = none
dotnet_diagnostic.MD038 = none
dotnet_diagnostic.MD039 = none
dotnet_diagnostic.MD040 = none
dotnet_diagnostic.MD041 = none
dotnet_diagnostic.MD042 = none
dotnet_diagnostic.MD043 = none
dotnet_diagnostic.MD044 = none
dotnet_diagnostic.MD045 = none
dotnet_diagnostic.MD046 = none
dotnet_diagnostic.MD047 = none
dotnet_diagnostic.MD048 = none
dotnet_diagnostic.MD049 = none
dotnet_diagnostic.MD050 = none
dotnet_diagnostic.MD051 = none
dotnet_diagnostic.MD052 = none
dotnet_diagnostic.MD053 = none

# Naming conventions - suppress IDE1006 (Roslyn naming) since we follow explicit C# style guide
# The style guide explicitly allows 2-letter acronyms like UI and AI to stay uppercase
dotnet_diagnostic.IDE1006 = none
dotnet_diagnostic.IDE1006.severity = none

# Test files specific configuration
[tests/**/*.cs]
# Suppress CA1822 (unused member static) for test methods
# GDUnit4 requires instance methods for proper test isolation and lifecycle management
dotnet_diagnostic.CA1822.severity = none

# Allow snake_case naming for test methods (e.g., Test_Scenario_Expected)
# This improves readability and follows common test naming conventions
dotnet_naming_rule.test_methods_should_allow_underscores.severity = none
dotnet_diagnostic.RCS1046.severity = none
dotnet_diagnostic.IDE1006.severity = none
