name: CI/CD with Coverage

on:
  push:
    branches: [ main, develop, '004-implement-omega-spiral' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-and-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for SonarCloud analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build project
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage/test-results --verbosity normal

    - name: Generate coverage reports
      run: |
        # Create coverage directory if it doesn't exist
        mkdir -p coverage

        # Merge coverage results and generate reports in multiple formats
        if [ -d "coverage/test-results" ] && [ "$(ls -A coverage/test-results)" ]; then
          # Use dotnet-coverage to merge and convert coverage reports
          dotnet tool install --global dotnet-coverage --version 17.12.6

          # Merge coverage files
          dotnet-coverage merge coverage/test-results/*.xml -o coverage/merged.coverage.xml -f cobertura

          # Convert to different formats for various tools
          dotnet-coverage merge coverage/test-results/*.xml -o coverage/coverage.opencover.xml -f opencover
          dotnet-coverage merge coverage/test-results/*.xml -o coverage/coverage.lcov.info -f lcov

          echo "Coverage reports generated successfully"
          ls -la coverage/
        else
          echo "No coverage results found"
          exit 1
        fi

    - name: Test Results Summary
      if: always()
      run: |
        echo "=== CI/CD Results ==="
        echo "Build: $([ $? -eq 0 ] && echo 'PASSED' || echo 'FAILED')"
        echo "Tests: $([ -d 'coverage/test-results' ] && echo 'EXECUTED' || echo 'NOT FOUND')"
        echo "Coverage: $([ -f 'coverage/coverage.cobertura.xml' ] && echo 'GENERATED' || echo 'MISSING')"

        # Fail the job if critical checks didn't pass
        if [ ! -d "coverage/test-results" ] || [ ! -f "coverage/coverage.cobertura.xml" ]; then
          echo "❌ Quality checks failed - build will not proceed"
          exit 1
        fi

        echo "✅ All quality checks passed"
